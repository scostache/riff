// Code generated by mockery v1.0.0. DO NOT EDIT.

package vendor_mocks

import api "k8s.io/client-go/tools/clientcmd/api"
import clientcmd "k8s.io/client-go/tools/clientcmd"
import mock "github.com/stretchr/testify/mock"
import rest "k8s.io/client-go/rest"

// ClientConfig is an autogenerated mock type for the ClientConfig type
type ClientConfig struct {
	mock.Mock
}

// ClientConfig provides a mock function with given fields:
func (_m *ClientConfig) ClientConfig() (*rest.Config, error) {
	ret := _m.Called()

	var r0 *rest.Config
	if rf, ok := ret.Get(0).(func() *rest.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Config)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigAccess provides a mock function with given fields:
func (_m *ClientConfig) ConfigAccess() clientcmd.ConfigAccess {
	ret := _m.Called()

	var r0 clientcmd.ConfigAccess
	if rf, ok := ret.Get(0).(func() clientcmd.ConfigAccess); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientcmd.ConfigAccess)
		}
	}

	return r0
}

// Namespace provides a mock function with given fields:
func (_m *ClientConfig) Namespace() (string, bool, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RawConfig provides a mock function with given fields:
func (_m *ClientConfig) RawConfig() (api.Config, error) {
	ret := _m.Called()

	var r0 api.Config
	if rf, ok := ret.Get(0).(func() api.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(api.Config)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
