// Code generated by mockery v1.0.0. DO NOT EDIT.

package mockserving

import mock "github.com/stretchr/testify/mock"

import types "k8s.io/apimachinery/pkg/types"
import v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
import v1alpha1 "github.com/knative/serving/pkg/apis/serving/v1alpha1"
import watch "k8s.io/apimachinery/pkg/watch"

// ServiceInterface is an autogenerated mock type for the ServiceInterface type
type ServiceInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *ServiceInterface) Create(_a0 *v1alpha1.Service) (*v1alpha1.Service, error) {
	ret := _m.Called(_a0)

	var r0 *v1alpha1.Service
	if rf, ok := ret.Get(0).(func(*v1alpha1.Service) *v1alpha1.Service); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Service) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: name, options
func (_m *ServiceInterface) Delete(name string, options *v1.DeleteOptions) error {
	ret := _m.Called(name, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *v1.DeleteOptions) error); ok {
		r0 = rf(name, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCollection provides a mock function with given fields: options, listOptions
func (_m *ServiceInterface) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	ret := _m.Called(options, listOptions)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.DeleteOptions, v1.ListOptions) error); ok {
		r0 = rf(options, listOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: name, options
func (_m *ServiceInterface) Get(name string, options v1.GetOptions) (*v1alpha1.Service, error) {
	ret := _m.Called(name, options)

	var r0 *v1alpha1.Service
	if rf, ok := ret.Get(0).(func(string, v1.GetOptions) *v1alpha1.Service); ok {
		r0 = rf(name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.GetOptions) error); ok {
		r1 = rf(name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: opts
func (_m *ServiceInterface) List(opts v1.ListOptions) (*v1alpha1.ServiceList, error) {
	ret := _m.Called(opts)

	var r0 *v1alpha1.ServiceList
	if rf, ok := ret.Get(0).(func(v1.ListOptions) *v1alpha1.ServiceList); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ServiceList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(v1.ListOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: name, pt, data, subresources
func (_m *ServiceInterface) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1.Service, error) {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, pt, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.Service
	if rf, ok := ret.Get(0).(func(string, types.PatchType, []byte, ...string) *v1alpha1.Service); ok {
		r0 = rf(name, pt, data, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, types.PatchType, []byte, ...string) error); ok {
		r1 = rf(name, pt, data, subresources...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *ServiceInterface) Update(_a0 *v1alpha1.Service) (*v1alpha1.Service, error) {
	ret := _m.Called(_a0)

	var r0 *v1alpha1.Service
	if rf, ok := ret.Get(0).(func(*v1alpha1.Service) *v1alpha1.Service); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Service) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: _a0
func (_m *ServiceInterface) UpdateStatus(_a0 *v1alpha1.Service) (*v1alpha1.Service, error) {
	ret := _m.Called(_a0)

	var r0 *v1alpha1.Service
	if rf, ok := ret.Get(0).(func(*v1alpha1.Service) *v1alpha1.Service); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Service) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: opts
func (_m *ServiceInterface) Watch(opts v1.ListOptions) (watch.Interface, error) {
	ret := _m.Called(opts)

	var r0 watch.Interface
	if rf, ok := ret.Get(0).(func(v1.ListOptions) watch.Interface); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(v1.ListOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
